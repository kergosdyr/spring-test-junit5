plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
}

ext.hamcrestVersion      = '1.3'
ext.jacksonVersion       = '2.9.5'
ext.jsonpathVersion      = '2.4.0'
ext.junitVersion         = '5.10.2'
ext.log4JVersion         = '2.11.1'
ext.servletApiVersion    = '3.1.0'
ext.springVersion        = '4.3.14.RELEASE'
ext.jpaVersion           = '1.11.23.RELEASE' // 이 버전은 Spring 4.3.x와 호환됩니다.

//java 1.8
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	implementation platform("org.junit:junit-bom:${junitVersion}")

	implementation("org.springframework:spring-context:${springVersion}")
	implementation("org.springframework:spring-test:${springVersion}")
	implementation("org.junit.jupiter:junit-jupiter-api")
	// Spring Data JPA 추가
	implementation("org.springframework.data:spring-data-jpa:${jpaVersion}")

	// H2 데이터베이스 추가
	runtimeOnly('com.h2database:h2:2.2.224')
	implementation("org.hibernate:hibernate-core:5.2.17.Final")

// Hibernate EntityManager, JPA 호환을 위해 필요
	implementation("org.hibernate:hibernate-entitymanager:5.2.17.Final")


	testImplementation("org.springframework:spring-webmvc:${springVersion}")
	testImplementation("javax.servlet:javax.servlet-api:${servletApiVersion}")
	testImplementation("org.hamcrest:hamcrest-core:${hamcrestVersion}")
	testImplementation("com.jayway.jsonpath:json-path:${jsonpathVersion}")
	testImplementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
	// Enable use of the JUnitPlatform Runner within the IDE
	testImplementation("org.junit.platform:junit-platform-runner")

	testImplementation("org.junit.jupiter:junit-jupiter-engine")
	testImplementation("org.apache.logging.log4j:log4j-core:${log4JVersion}")
	testImplementation("org.apache.logging.log4j:log4j-jul:${log4JVersion}")
	testImplementation("org.apache.logging.log4j:log4j-jcl:${log4JVersion}")
	testImplementation("org.apache.logging.log4j:log4j-slf4j-impl:${log4JVersion}")
}

processResources {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


sourceSets {
	main {
		java {
			srcDirs 'src/main/java', 'src/main/client/java'
		}
		resources {
			srcDir 'src/main/resources'
			exclude '**/META-INF/persistence.xml'
		}
	}
	test {
		java {
			srcDir 'src/test/java'
		}
		resources {
			srcDir 'src/test/resources'
		}
	}

}


processTestResources {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
	useJUnitPlatform()
	testLogging.events "failed" // , "passed", "skipped", "standardOut", "standardError"
}

javadoc {
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.name
	options.addStringOption('Xdoclint:none', '-quiet')
}


group = 'org.springframework.test'

